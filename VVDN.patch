--- Linux_for_Tegra/bootloader/t186ref/BCT/tegra234-mb2-bct-misc-p3767-0000.dts	2023-08-01 12:49:31.245789095 -0700
+++ /home/engineering/Downloads/VVDN_DON2/vvdn-linux/Linux_for_Tegra/bootloader/t186ref/BCT/tegra234-mb2-bct-misc-p3767-0000.dts	2023-12-15 00:04:06.833046286 -0800
@@ -10,7 +10,7 @@
 			cvm_eeprom_read_size = <0x100>;
 			cvb_eeprom_i2c_instance = <0x0>;
 			cvb_eeprom_i2c_slave_address = <0xae>;
-			cvb_eeprom_read_size = <0x100>;
+			cvb_eeprom_read_size = <0x0>;
 		};
 	};
-};
\ No newline at end of file
+};




--- Linux_for_Tegra/p3767.conf.common	2023-08-01 12:49:31.137791809 -0700
+++ /home/engineering/Downloads/VVDN_DON2/vvdn-linux/Linux_for_Tegra/p3767.conf.common	2023-12-15 00:04:06.833046286 -0800
@@ -124,7 +124,7 @@
 
 # Common values and/or defaults across P3767:
 
-ODMDATA="gbe-uphy-config-8,hsstp-lane-map-3,hsio-uphy-config-0";
+ODMDATA="gbe-uphy-config-9,hsstp-lane-map-3,hsio-uphy-config-0";
 CHIPID=0x23;
 ITS_FILE=;
 OVERLAY_DTB_FILE="L4TConfiguration.dtbo,tegra234-p3767-overlay.dtbo";


--- Linux_for_Tegra/source/public/hardware/nvidia/platform/t23x/p3768/kernel-dts/cvb/tegra234-camera-rbpcv4-imx296.dtsi	2023-12-28 14:25:42.714549226 -0800
+++ /home/engineering/Downloads/VVDN_DON2/vvdn-linux/Linux_for_Tegra/source/public/hardware/nvidia/platform/t23x/p3768/kernel-dts/cvb/tegra234-camera-rbpcv4-imx296.dtsi	2023-12-26 12:07:36.622310190 -0800
@@ -0,0 +1,854 @@
+/*
+ * Copyright (c) 2022, NVIDIA CORPORATION.  All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+#include <dt-bindings/media/camera.h>
+
+/ {
+	tegra-capture-vi  {
+		num-channels = <3>;
+		ports {
+			#address-cells = <1>;
+			#size-cells = <0>;
+			vi_port0: port@0 {
+				reg = <0>;
+				rbpcv4_imx296_vi_in0: endpoint {
+					port-index = <0>;
+					bus-width = <1>;
+					remote-endpoint = <&rbpcv4_imx296_csi_out0>;
+						};
+					};
+
+
+
+			vi_port1: port@1 {
+				reg = <1>;
+				rbpcv4_imx296_vi_in1: endpoint {
+					port-index = <1>;
+					bus-width = <1>;
+					remote-endpoint = <&rbpcv4_imx296_csi_out1>;
+						};
+					};
+
+
+
+
+			vi_port2: port@2 {
+				reg = <2>;
+				rbpcv4_imx296_vi_in2: endpoint {
+					port-index = <2>;
+					bus-width = <1>;
+					remote-endpoint = <&rbpcv4_imx296_csi_out2>;
+						};
+					};
+			};
+		};
+
+
+        host1x@13e00000 {
+                nvcsi@15a00000 {
+                        num-channels = <3>;
+                        #address-cells = <1>;
+                        #size-cells = <0>;
+                        csi_chan0: channel@0{
+                                reg = <0>;
+                                ports {
+                                        #address-cells = <1>;
+                                        #size-cells = <0>;
+                                        csi_chan0_port0: port@0 {
+                                                reg = <0>;//serial_a
+                                                rbpcv4_imx296_csi_in0: endpoint@0 {
+                                                        port-index = <0>;
+                                                        bus-width = <1>;
+                                                        remote-endpoint = <&rbpcv4_imx296_out0>;
+                                                };
+                                        };
+                                        csi_chan0_port1: port@1 {
+                                                reg = <1>;
+                                                rbpcv4_imx296_csi_out0: endpoint@1 {
+                                                        remote-endpoint = <&rbpcv4_imx296_vi_in0>;
+                                                };
+                                        };
+                                };
+                        };//---
+
+                        csi_chan1: channel@1 {
+                                reg = <1>;
+                                ports {
+                                        #address-cells = <1>;
+                                        #size-cells = <0>;
+                                        csi_chan1_port0: port@0 {
+                                                reg = <0>;
+                                                rbpcv4_imx296_csi_in1: endpoint@2 {//seria_b
+                                                        port-index = <1>;
+                                                        bus-width = <1>;
+                                                        remote-endpoint = <&rbpcv4_imx296_out1>;
+                                                };
+                                        };
+                                        csi_chan1_port1: port@1 {
+                                                reg = <1>;
+                                                rbpcv4_imx296_csi_out1: endpoint@3 {
+                                                        remote-endpoint = <&rbpcv4_imx296_vi_in1>;
+                                                };
+                                        };
+                                };
+                        };//---
+                     csi_chan2: channel@2 {
+                                reg = <2>;
+                                ports {
+                                        #address-cells = <1>;
+                                        #size-cells = <0>;
+                                        csi_chan2_port0: port@0 {
+                                                reg = <0>;
+                                                rbpcv4_imx296_csi_in2: endpoint@4 {//serial c
+                                                        port-index = <2>;
+                                                        bus-width = <1>;
+                                                        remote-endpoint = <&rbpcv4_imx296_out2>;
+                                                };
+                                        };
+                                        csi_chan2_port1: port@1 {
+                                                reg = <1>;
+                                                rbpcv4_imx296_csi_out2: endpoint@5 {
+                                                        remote-endpoint = <&rbpcv4_imx296_vi_in2>;
+                                                };
+                                        };
+                                };
+                        };//---
+
+
+                };
+        };
+
+
+	i2c@3180000 {
+			imx296_cam0: rbpcv4_imx296_a@36 {
+				compatible = "nvidia,imx296";
+				/* I2C device address */
+				reg = <0x36>;
+
+				/* V4L2 device node location */
+				devnode = "video0";
+
+				/* Physical dimensions of sensor */
+				physical_w = "3.680";
+				physical_h = "2.760";
+
+				sensor_model = "imx296";
+			//	sensor_filter_info = "mono";
+
+				use_sensor_mode_id = "true";
+
+				/**
+				* ==== Modes ====
+				* A modeX node is required to support v4l2 driver
+				* implementation with NVIDIA camera software stack
+				*
+				* == Signal properties ==
+				*
+				* phy_mode = "";
+				* PHY mode used by the MIPI lanes for this device
+				*
+				* tegra_sinterface = "";
+				* CSI Serial interface connected to tegra
+				* Incase of virtual HW devices, use virtual
+				* For SW emulated devices, use host
+				*
+				* pix_clk_hz = "";
+				* Sensor pixel clock used for calculations like exposure and framerate
+				*
+				* readout_orientation = "0";
+				* Based on camera module orientation.
+				* Only change readout_orientation if you specifically
+				* Program a different readout order for this mode
+				*
+				* lane_polarity
+				* Based on the camera connector pin.
+				* CSIx_D0 | CSIx_D1 | CSI(X+1)_D0 | CSI(X+1)CSIx_D1
+				*    LSB  |   BIT1  |     BIT2    |      MSB
+				* if there is a polarity swap on any lane, the bit corrsponding
+				* to the lane should be set
+				* e.g. polarity swap on CSIx_D0 only -> lane_polarity = "1"; 0001
+				* e.g. polarity swap on CSIx_D1 and CSI(X+1)_D0 -> lane_polarity = "6"; 0110
+				*
+				* == Image format Properties ==
+				*
+				* active_w = "";
+				* Pixel active region width
+				*
+				* active_h = "";
+				* Pixel active region height
+				*
+				* pixel_t = "";
+				* The sensor readout pixel pattern
+				*
+				* line_length = "";
+				* Pixel line length (width) for sensor mode.
+				*
+				* == Source Control Settings ==
+				*
+				* Gain factor used to convert fixed point integer to float
+				* Gain range [min_gain/gain_factor, max_gain/gain_factor]
+				* Gain step [step_gain/gain_factor is the smallest step that can be configured]
+				* Default gain [Default gain to be initialized for the control.
+				*     use min_gain_val as default for optimal results]
+				* Framerate factor used to convert fixed point integer to float
+				* Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
+				* Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
+				* Default Framerate [Default framerate to be initialized for the control.
+				*     use max_framerate to get required performance]
+				* Exposure factor used to convert fixed point integer to float
+				* For convenience use 1 sec = 1000000us as conversion factor
+				* Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
+				* Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
+				* Default Exposure Time [Default exposure to be initialized for the control.
+				*     Set default exposure based on the default_framerate for optimal exposure settings]
+				*
+				* gain_factor = ""; (integer factor used for floating to fixed point conversion)
+				* min_gain_val = ""; (ceil to integer)
+				* max_gain_val = ""; (ceil to integer)
+				* step_gain_val = ""; (ceil to integer)
+				* default_gain = ""; (ceil to integer)
+				* Gain limits for mode
+				*
+				* exposure_factor = ""; (integer factor used for floating to fixed point conversion)
+				* min_exp_time = ""; (ceil to integer)
+				* max_exp_time = ""; (ceil to integer)
+				* step_exp_time = ""; (ceil to integer)
+				* default_exp_time = ""; (ceil to integer)
+				* Exposure Time limits for mode (sec)
+				*
+				* framerate_factor = ""; (integer factor used for floating to fixed point conversion)
+				* min_framerate = ""; (ceil to integer)
+				* max_framerate = ""; (ceil to integer)
+				* step_framerate = ""; (ceil to integer)
+				* default_framerate = ""; (ceil to integer)
+				* Framerate limits for mode (fps)
+				*
+				* embedded_metadata_height = "";
+				* Sensor embedded metadata height in units of rows.
+				* If sensor does not support embedded metadata value should be 0.
+				*/
+				mode0 { /* IMX296_MODE_1456X1088, 60 FPS */
+					mclk_khz = "37125";
+					num_lanes = "1";
+					tegra_sinterface = "serial_a";
+					lane_polarity = "6";
+					phy_mode = "DPHY";
+					discontinuous_clk = "no";
+					dpcm_enable = "false";
+					cil_settletime = "0";
+
+					active_w = "1456";
+					active_h = "1088";
+					mode_type = "bayer";
+                                        pixel_phase = "rggb";
+					readout_orientation = "0";
+					line_length = "1760";
+					dynamic_pixel_bit_depth = "10";
+					csi_pixel_bit_depth = "10";
+					inherent_gain = "1";
+					mclk_multiplier = "3.91";
+					pix_clk_hz = "145000000";
+
+					gain_factor = "10";
+					framerate_factor = "1000000";
+					exposure_factor = "1000000";
+					min_gain_val = "1";
+					max_gain_val = "480";
+					step_gain_val = "1";
+					default_gain = "20";
+					min_hdr_ratio = "1";
+					max_hdr_ratio = "1";
+					min_framerate = "1000000"; /* 10 fps */
+					max_framerate = "60000000"; /* 60 fps */
+					step_framerate = "1";
+					default_framerate = "60000000"; /* 60 fps */
+					min_exp_time = "28"; /* us */
+					max_exp_time = "660000"; /* us */
+					step_exp_time = "1";
+					default_exp_time = "16370"; /* us */
+
+					embedded_metadata_height = "2";
+				};
+
+					mode1 { /* Normal, 60 FPS */
+					mclk_khz = "37125";
+					num_lanes = "1";
+					tegra_sinterface = "serial_a";
+					lane_polarity = "6";
+					phy_mode = "DPHY";
+					discontinuous_clk = "no";
+					dpcm_enable = "false";
+					cil_settletime = "0";
+
+					active_w = "1456";
+					active_h = "1088";
+					mode_type = "bayer";
+                                        pixel_phase = "rggb";
+					readout_orientation = "0";
+					line_length = "1760";
+					dynamic_pixel_bit_depth = "10";
+					csi_pixel_bit_depth = "10";
+					inherent_gain = "1";
+					mclk_multiplier = "3.91";
+					pix_clk_hz = "145000000";
+
+					gain_factor = "10";
+					framerate_factor = "1000000";
+					exposure_factor = "1000000";
+					min_gain_val = "1";
+					max_gain_val = "480";
+					step_gain_val = "1";
+					default_gain = "20";
+					min_hdr_ratio = "1";
+					max_hdr_ratio = "1";
+					min_framerate = "1000000"; /* 10 fps */
+					max_framerate = "60000000"; /* 60 fps */
+					step_framerate = "1";
+					default_framerate = "60000000"; /* 60 fps */
+					min_exp_time = "28"; /* us */
+					max_exp_time = "660000"; /* us */
+					step_exp_time = "1";
+					default_exp_time = "16370"; /* us */
+
+					embedded_metadata_height = "2";
+				};			ports {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					port@0 {
+						reg = <0>;
+						rbpcv4_imx296_out0: endpoint {
+							port-index = <0>;
+							bus-width = <1>;
+							remote-endpoint = <&rbpcv4_imx296_csi_in0>;
+						};
+					};
+				};
+			};
+	};
+
+//----------------------------------Adding COnfiguration----------------------------------
+
+
+	i2c@3160000 {
+			imx296_cam1: rbpcv4_imx296_c@36 {
+				compatible = "nvidia,imx296";
+				/* I2C device address */
+				reg = <0x36>;
+
+				/* V4L2 device node location */
+				devnode = "video0";
+
+				/* Physical dimensions of sensor */
+				physical_w = "3.680";
+				physical_h = "2.760";
+
+				sensor_model = "imx296";
+			//	sensor_filter_info = "mono";
+
+				use_sensor_mode_id = "true";
+
+				/**
+				* ==== Modes ====
+				* A modeX node is required to support v4l2 driver
+				* implementation with NVIDIA camera software stack
+				*
+				* == Signal properties ==
+				*
+				* phy_mode = "";
+				* PHY mode used by the MIPI lanes for this device
+				*
+				* tegra_sinterface = "";
+				* CSI Serial interface connected to tegra
+				* Incase of virtual HW devices, use virtual
+				* For SW emulated devices, use host
+				*
+				* pix_clk_hz = "";
+				* Sensor pixel clock used for calculations like exposure and framerate
+				*
+				* readout_orientation = "0";
+				* Based on camera module orientation.
+				* Only change readout_orientation if you specifically
+				* Program a different readout order for this mode
+				*
+				* lane_polarity
+				* Based on the camera connector pin.
+				* CSIx_D0 | CSIx_D1 | CSI(X+1)_D0 | CSI(X+1)CSIx_D1
+				*    LSB  |   BIT1  |     BIT2    |      MSB
+				* if there is a polarity swap on any lane, the bit corrsponding
+				* to the lane should be set
+				* e.g. polarity swap on CSIx_D0 only -> lane_polarity = "1"; 0001
+				* e.g. polarity swap on CSIx_D1 and CSI(X+1)_D0 -> lane_polarity = "6"; 0110
+				*
+				* == Image format Properties ==
+				*
+				* active_w = "";
+				* Pixel active region width
+				*
+				* active_h = "";
+				* Pixel active region height
+				*
+				* pixel_t = "";
+				* The sensor readout pixel pattern
+				*
+				* line_length = "";
+				* Pixel line length (width) for sensor mode.
+				*
+				* == Source Control Settings ==
+				*
+				* Gain factor used to convert fixed point integer to float
+				* Gain range [min_gain/gain_factor, max_gain/gain_factor]
+				* Gain step [step_gain/gain_factor is the smallest step that can be configured]
+				* Default gain [Default gain to be initialized for the control.
+				*     use min_gain_val as default for optimal results]
+				* Framerate factor used to convert fixed point integer to float
+				* Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
+				* Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
+				* Default Framerate [Default framerate to be initialized for the control.
+				*     use max_framerate to get required performance]
+				* Exposure factor used to convert fixed point integer to float
+				* For convenience use 1 sec = 1000000us as conversion factor
+				* Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
+				* Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
+				* Default Exposure Time [Default exposure to be initialized for the control.
+				*     Set default exposure based on the default_framerate for optimal exposure settings]
+				*
+				* gain_factor = ""; (integer factor used for floating to fixed point conversion)
+				* min_gain_val = ""; (ceil to integer)
+				* max_gain_val = ""; (ceil to integer)
+				* step_gain_val = ""; (ceil to integer)
+				* default_gain = ""; (ceil to integer)
+				* Gain limits for mode
+				*
+				* exposure_factor = ""; (integer factor used for floating to fixed point conversion)
+				* min_exp_time = ""; (ceil to integer)
+				* max_exp_time = ""; (ceil to integer)
+				* step_exp_time = ""; (ceil to integer)
+				* default_exp_time = ""; (ceil to integer)
+				* Exposure Time limits for mode (sec)
+				*
+				* framerate_factor = ""; (integer factor used for floating to fixed point conversion)
+				* min_framerate = ""; (ceil to integer)
+				* max_framerate = ""; (ceil to integer)
+				* step_framerate = ""; (ceil to integer)
+				* default_framerate = ""; (ceil to integer)
+				* Framerate limits for mode (fps)
+				*
+				* embedded_metadata_height = "";
+				* Sensor embedded metadata height in units of rows.
+				* If sensor does not support embedded metadata value should be 0.
+				*/
+				mode0 { /* IMX296_MODE_1456X1088, 60 FPS */
+					mclk_khz = "37125";
+					num_lanes = "1";
+					tegra_sinterface = "serial_c";
+					phy_mode = "DPHY";
+					discontinuous_clk = "no";
+					dpcm_enable = "false";
+					cil_settletime = "0";
+
+					active_w = "1456";
+					active_h = "1088";
+					mode_type = "bayer";
+                                        pixel_phase = "rggb";
+					readout_orientation = "0";
+					line_length = "1760";
+					dynamic_pixel_bit_depth = "10";
+					csi_pixel_bit_depth = "10";
+					inherent_gain = "1";
+					mclk_multiplier = "3.91";
+					pix_clk_hz = "145000000";
+
+					gain_factor = "10";
+					framerate_factor = "1000000";
+					exposure_factor = "1000000";
+					min_gain_val = "1";
+					max_gain_val = "480";
+					step_gain_val = "1";
+					default_gain = "20";
+					min_hdr_ratio = "1";
+					max_hdr_ratio = "1";
+					min_framerate = "1000000"; /* 10 fps */
+					max_framerate = "60000000"; /* 60 fps */
+					step_framerate = "1";
+					default_framerate = "60000000"; /* 60 fps */
+					min_exp_time = "28"; /* us */
+					max_exp_time = "660000"; /* us */
+					step_exp_time = "1";
+					default_exp_time = "16370"; /* us */
+
+					embedded_metadata_height = "2";
+				};
+
+					mode1 { /* Normal mode, 60 FPS */
+					mclk_khz = "37125";
+					num_lanes = "1";
+					tegra_sinterface = "serial_c";
+					phy_mode = "DPHY";
+					discontinuous_clk = "no";
+					dpcm_enable = "false";
+					cil_settletime = "0";
+
+					active_w = "1456";
+					active_h = "1088";
+					mode_type = "bayer";
+                                        pixel_phase = "rggb";
+					readout_orientation = "0";
+					line_length = "1760";
+					dynamic_pixel_bit_depth = "10";
+					csi_pixel_bit_depth = "10";
+					inherent_gain = "1";
+					mclk_multiplier = "3.91";
+					pix_clk_hz = "145000000";
+
+					gain_factor = "10";
+					framerate_factor = "1000000";
+					exposure_factor = "1000000";
+					min_gain_val = "1";
+					max_gain_val = "480";
+					step_gain_val = "1";
+					default_gain = "20";
+					min_hdr_ratio = "1";
+					max_hdr_ratio = "1";
+					min_framerate = "1000000"; /* 10 fps */
+					max_framerate = "60000000"; /* 60 fps */
+					step_framerate = "1";
+					default_framerate = "60000000"; /* 60 fps */
+					min_exp_time = "28"; /* us */
+					max_exp_time = "660000"; /* us */
+					step_exp_time = "1";
+					default_exp_time = "16370"; /* us */
+
+					embedded_metadata_height = "2";
+				};
+
+			ports {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					port@0 {
+						reg = <0>;
+						rbpcv4_imx296_out2: endpoint {
+							port-index = <2>;
+							bus-width = <1>;
+							remote-endpoint = <&rbpcv4_imx296_csi_in2>;
+						};
+					};
+				};
+			};
+	};
+
+//--------------------------------------------------------------------------------------------------------
+	i2c@c250000 {
+			imx296_cam2: rbpcv4_imx296_b@36 {
+				compatible = "nvidia,imx296";
+				/* I2C device address */
+				reg = <0x36>;
+
+				/* V4L2 device node location */
+				devnode = "video0";
+
+				/* Physical dimensions of sensor */
+				physical_w = "3.680";
+				physical_h = "2.760";
+
+				sensor_model = "imx296";
+			//	sensor_filter_info = "mono";
+
+				use_sensor_mode_id = "true";
+
+				/**
+				* ==== Modes ====
+				* A modeX node is required to support v4l2 driver
+				* implementation with NVIDIA camera software stack
+				*
+				* == Signal properties ==
+				*
+				* phy_mode = "";
+				* PHY mode used by the MIPI lanes for this device
+				*
+				* tegra_sinterface = "";
+				* CSI Serial interface connected to tegra
+				* Incase of virtual HW devices, use virtual
+				* For SW emulated devices, use host
+				*
+				* pix_clk_hz = "";
+				* Sensor pixel clock used for calculations like exposure and framerate
+				*
+				* readout_orientation = "0";
+				* Based on camera module orientation.
+				* Only change readout_orientation if you specifically
+				* Program a different readout order for this mode
+				*
+				* lane_polarity
+				* Based on the camera connector pin.
+				* CSIx_D0 | CSIx_D1 | CSI(X+1)_D0 | CSI(X+1)CSIx_D1
+				*    LSB  |   BIT1  |     BIT2    |      MSB
+				* if there is a polarity swap on any lane, the bit corrsponding
+				* to the lane should be set
+				* e.g. polarity swap on CSIx_D0 only -> lane_polarity = "1"; 0001
+				* e.g. polarity swap on CSIx_D1 and CSI(X+1)_D0 -> lane_polarity = "6"; 0110
+				*
+				* == Image format Properties ==
+				*
+				* active_w = "";
+				* Pixel active region width
+				*
+				* active_h = "";
+				* Pixel active region height
+				*
+				* pixel_t = "";
+				* The sensor readout pixel pattern
+				*
+				* line_length = "";
+				* Pixel line length (width) for sensor mode.
+				*
+				* == Source Control Settings ==
+				*
+				* Gain factor used to convert fixed point integer to float
+				* Gain range [min_gain/gain_factor, max_gain/gain_factor]
+				* Gain step [step_gain/gain_factor is the smallest step that can be configured]
+				* Default gain [Default gain to be initialized for the control.
+				*     use min_gain_val as default for optimal results]
+				* Framerate factor used to convert fixed point integer to float
+				* Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
+				* Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
+				* Default Framerate [Default framerate to be initialized for the control.
+				*     use max_framerate to get required performance]
+				* Exposure factor used to convert fixed point integer to float
+				* For convenience use 1 sec = 1000000us as conversion factor
+				* Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
+				* Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
+				* Default Exposure Time [Default exposure to be initialized for the control.
+				*     Set default exposure based on the default_framerate for optimal exposure settings]
+				*
+				* gain_factor = ""; (integer factor used for floating to fixed point conversion)
+				* min_gain_val = ""; (ceil to integer)
+				* max_gain_val = ""; (ceil to integer)
+				* step_gain_val = ""; (ceil to integer)
+				* default_gain = ""; (ceil to integer)
+				* Gain limits for mode
+				*
+				* exposure_factor = ""; (integer factor used for floating to fixed point conversion)
+				* min_exp_time = ""; (ceil to integer)
+				* max_exp_time = ""; (ceil to integer)
+				* step_exp_time = ""; (ceil to integer)
+				* default_exp_time = ""; (ceil to integer)
+				* Exposure Time limits for mode (sec)
+				*
+				* framerate_factor = ""; (integer factor used for floating to fixed point conversion)
+				* min_framerate = ""; (ceil to integer)
+				* max_framerate = ""; (ceil to integer)
+				* step_framerate = ""; (ceil to integer)
+				* default_framerate = ""; (ceil to integer)
+				* Framerate limits for mode (fps)
+				*
+				* embedded_metadata_height = "";
+				* Sensor embedded metadata height in units of rows.
+				* If sensor does not support embedded metadata value should be 0.
+				*/
+				mode0 { /* IMX296_MODE_1456X1088, 60 FPS */
+					mclk_khz = "37125";
+					num_lanes = "1";
+					tegra_sinterface = "serial_b";
+					lane_polarity = "6";
+					phy_mode = "DPHY";
+					discontinuous_clk = "no";
+					dpcm_enable = "false";
+					cil_settletime = "0";
+
+					active_w = "1456";
+					active_h = "1088";
+					mode_type = "bayer";
+                                        pixel_phase = "rggb";
+					readout_orientation = "0";
+					line_length = "1760";
+					dynamic_pixel_bit_depth = "10";
+					csi_pixel_bit_depth = "10";
+					inherent_gain = "1";
+					mclk_multiplier = "3.91";
+					pix_clk_hz = "145000000";
+
+					gain_factor = "10";
+					framerate_factor = "1000000";
+					exposure_factor = "1000000";
+					min_gain_val = "1";
+					max_gain_val = "480";
+					step_gain_val = "1";
+					default_gain = "20";
+					min_hdr_ratio = "1";
+					max_hdr_ratio = "1";
+					min_framerate = "1000000"; /* 10 fps */
+					max_framerate = "60000000"; /* 60 fps */
+					step_framerate = "1";
+					default_framerate = "60000000"; /* 60 fps */
+					min_exp_time = "28"; /* us */
+					max_exp_time = "660000"; /* us */
+					step_exp_time = "1";
+					default_exp_time = "16370"; /* us */
+
+					embedded_metadata_height = "2";
+				};
+				mode1 { /*Normal mode, 60 FPS */
+					mclk_khz = "37125";
+					num_lanes = "1";
+					tegra_sinterface = "serial_b";
+					lane_polarity = "6";
+					phy_mode = "DPHY";
+					discontinuous_clk = "no";
+					dpcm_enable = "false";
+					cil_settletime = "0";
+
+					active_w = "1456";
+					active_h = "1088";
+					mode_type = "bayer";
+                                        pixel_phase = "rggb";
+					readout_orientation = "0";
+					line_length = "1760";
+					dynamic_pixel_bit_depth = "10";
+					csi_pixel_bit_depth = "10";
+					inherent_gain = "1";
+					mclk_multiplier = "3.91";
+					pix_clk_hz = "145000000";
+
+					gain_factor = "10";
+					framerate_factor = "1000000";
+					exposure_factor = "1000000";
+					min_gain_val = "1";
+					max_gain_val = "480";
+					step_gain_val = "1";
+					default_gain = "20";
+					min_hdr_ratio = "1";
+					max_hdr_ratio = "1";
+					min_framerate = "1000000"; /* 10 fps */
+					max_framerate = "60000000"; /* 60 fps */
+					step_framerate = "1";
+					default_framerate = "60000000"; /* 60 fps */
+					min_exp_time = "28"; /* us */
+					max_exp_time = "660000"; /* us */
+					step_exp_time = "1";
+					default_exp_time = "16370"; /* us */
+
+					embedded_metadata_height = "2";
+				};
+
+
+				ports {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					port@0 {
+						reg = <0>;
+						rbpcv4_imx296_out1: endpoint {
+							port-index = <1>;
+							bus-width = <1>;
+							remote-endpoint = <&rbpcv4_imx296_csi_in1>;
+						};
+					};
+				};
+			};
+	};
+
+
+
+//------------------------------------------------------------------------------------------
+};
+/ {
+	tcp: tegra-camera-platform {
+		compatible = "nvidia, tegra-camera-platform";
+		/**
+		* Physical settings to calculate max ISO BW
+		*
+		* num_csi_lanes = <>;
+		* Total number of CSI lanes when all cameras are active
+		*
+		* max_lane_speed = <>;
+		* Max lane speed in Kbit/s
+		*
+		* min_bits_per_pixel = <>;
+		* Min bits per pixel
+		*
+		* vi_peak_byte_per_pixel = <>;
+		* Max byte per pixel for the VI ISO case
+		*
+		* vi_bw_margin_pct = <>;
+		* Vi bandwidth margin in percentage
+		*
+		* max_pixel_rate = <>;
+		* Max pixel rate in Kpixel/s for the ISP ISO case
+		*
+		* isp_peak_byte_per_pixel = <>;
+		* Max byte per pixel for the ISP ISO case
+		*
+		* isp_bw_margin_pct = <>;
+		* Isp bandwidth margin in percentage
+		*/
+		num_csi_lanes = <4>;
+		max_lane_speed = <1500000>;
+		min_bits_per_pixel = <10>;
+		vi_peak_byte_per_pixel = <2>;
+		vi_bw_margin_pct = <25>;
+		max_pixel_rate = <240000>;
+		isp_peak_byte_per_pixel = <5>;
+		isp_bw_margin_pct = <25>;
+
+		/**
+		 * The general guideline for naming badge_info contains 3 parts, and is as follows,
+		 * The first part is the camera_board_id for the module; if the module is in a FFD
+		 * platform, then use the platform name for this part.
+		 * The second part contains the position of the module, ex. "rear" or "front".
+		 * The third part contains the last 6 characters of a part number which is found
+		 * in the module's specsheet from the vendor.
+		 */
+		/* badge number remains same for 186 and 194 for them to share the same config */
+		modules {
+			cam_module0: module0 {
+				badge = "lanai_front_RBP194";
+				position = "front";
+				orientation = "1";
+				cam_module0_drivernode0: drivernode0 {
+					pcl_id = "v4l2_sensor";
+					devname = "imx296 2-0036";
+					proc-device-tree = "/proc/device-tree/i2c@3180000/rbpcv4_imx296_a@36";
+				};
+			};
+
+			cam_module1: module1 {
+				badge = "lanai_center_RBP194";
+				position = "center";
+				orientation = "1";
+				cam_module1_drivernode0: drivernode0 {
+					pcl_id = "v4l2_sensor";
+					devname = "imx296 7-0036";
+					proc-device-tree = "/proc/device-tree/i2c@c250000/rbpcv4_imx296_b@36";
+				};
+			};
+
+
+			cam_module2: module2 {
+				badge = "lanai_rear_RBP194";
+				position = "rear";
+				orientation = "1";
+				cam_module2_drivernode0: drivernode0 {
+					pcl_id = "v4l2_sensor";
+					devname = "imx296 0-0036";
+					proc-device-tree = "/proc/device-tree/i2c@3160000/rbpcv4_imx296_c@36";
+				};
+			};
+
+
+
+
+		};
+	};
+};



--- Linux_for_Tegra/source/public/hardware/nvidia/platform/t23x/p3768/kernel-dts/cvb/tegra234-p3509-a02-pcie.dtsi	2023-08-01 12:30:31.000000000 -0700
+++ /home/engineering/Downloads/VVDN_DON2/vvdn-linux/Linux_for_Tegra/source/public/hardware/nvidia/platform/t23x/p3768/kernel-dts/cvb/tegra234-p3509-a02-pcie.dtsi	2023-12-19 12:14:08.147586268 -0800
@@ -26,6 +26,24 @@
 		phy-names = "p2u-0", "p2u-1", "p2u-2", "p2u-3";
 	};
 
+	pcie@141e0000 {
+		/*
+		 * C7 - M2 Key M, default config, other config possible as
+		 * below:
+		 * C7 x2 - default
+		 * C7 x1 or C9 x1
+		 */
+		status = "okay";
+		phys = <&p2u_gbe_0>;
+		phy-names = "p2u-0";
+	};
+
+	pcie@140c0000 { /* C9x1 */
+		status = "okay";
+		phys = <&p2u_gbe_1>;
+		phy-names = "p2u-0";
+	};
+
 	pcie@140a0000 {/* C8 - Ethernet */
 		status = "okay";
 
--- Linux_for_Tegra/source/public/hardware/nvidia/platform/t23x/p3768/kernel-dts/cvb/tegra234-p3509-a02.dtsi	2023-08-01 12:30:31.000000000 -0700
+++ /home/engineering/Downloads/VVDN_DON2/vvdn-linux/Linux_for_Tegra/source/public/hardware/nvidia/platform/t23x/p3768/kernel-dts/cvb/tegra234-p3509-a02.dtsi	2023-12-19 12:14:31.854699506 -0800
@@ -16,9 +16,7 @@
 #include "tegra234-p3509-a02-pcie.dtsi"
 #include "tegra234-p3509-a02-fixed-regulator.dtsi"
 #include "tegra234-p3509-audio.dtsi"
-#include "tegra234-p3768-camera-rbpcv3-imx477.dtsi"
-#include "tegra234-p3768-camera-rbpcv2-imx219.dtsi"
-
+#include "tegra234-p3768-camera-rbpcv4-imx296.dtsi"
 / {
 	gpio-keys {
 		compatible = "gpio-keys";
--- Linux_for_Tegra/source/public/hardware/nvidia/platform/t23x/p3768/kernel-dts/cvb/tegra234-p3768-0000-a0-pcie.dtsi	2023-08-01 12:30:31.000000000 -0700
+++ /home/engineering/Downloads/VVDN_DON2/vvdn-linux/Linux_for_Tegra/source/public/hardware/nvidia/platform/t23x/p3768/kernel-dts/cvb/tegra234-p3768-0000-a0-pcie.dtsi	2023-12-19 12:14:53.861889176 -0800
@@ -47,8 +47,14 @@
 		 * C7 x1 or C9 x1
 		 */
 		status = "okay";
-		phys = <&p2u_gbe_0>, <&p2u_gbe_1>;
-		phy-names = "p2u-0", "p2u-1";
+		phys = <&p2u_gbe_0>;
+		phy-names = "p2u-0";
+	};
+
+	pcie@140c0000 { /* C9x1 */
+		status = "okay";
+		phys = <&p2u_gbe_1>;
+		phy-names = "p2u-0";
 	};
 
 	pcie@140a0000 {/* C8 - Ethernet */
